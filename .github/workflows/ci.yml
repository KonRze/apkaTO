name: CI/CD

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_BACKEND: ${{ github.repository }}/backend
  IMAGE_FRONTEND: ${{ github.repository }}/frontend

jobs:
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Lint
        run: pip install flake8 && flake8 .
      - name: Test
        run: pip install pytest && pytest

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint --if-present
      - name: Test
        run: npm test -- --watchAll=false

  docker-build:
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND }}:${{ github.sha }}
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND }}:${{ github.sha }}

  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: SSH to server & deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /path/to/app
            docker compose pull
            docker compose run --rm backend alembic upgrade head
            docker compose up -d
